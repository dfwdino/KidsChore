@page "/login"
@inject NavigationManager Navigation
@inject IUserService UserService
@inject AuthenticationStateProvider AuthStateProvider

<div class="text-center my-4">
    <h2>Welcome to Kid Chores! <span style="font-size:2em;">ðŸ§¹âœ¨</span></h2>
    <p class="lead">Log in to see your chores and earnings!</p>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="d-flex justify-content-center">
    <div style="min-width:300px;max-width:400px;width:100%;">
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-4">
                <label class="form-label fs-5">Username</label>
                <InputText class="form-control form-control-lg" @bind-Value="loginModel.Username" />
            </div>
            <div class="mb-4">
                <label class="form-label fs-5">Password</label>
                <InputText class="form-control form-control-lg" @bind-Value="loginModel.Password" type="password" />
            </div>
            <button type="submit" class="btn btn-success btn-lg w-100">Log In</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        var user = await UserService.AuthenticateAsync(loginModel.Username, loginModel.Password);
        if (user != null)
        {
            // Store user info in session (for demo, use localStorage or a static class)
            AuthState.CurrentUser = user;
            ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication();
            Navigation.NavigateTo("completions");
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
} 